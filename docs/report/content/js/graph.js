/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 17418.0, "series": [{"data": [[0.0, 25.0], [0.1, 49.0], [0.2, 62.0], [0.3, 66.0], [0.4, 70.0], [0.5, 78.0], [0.6, 81.0], [0.7, 87.0], [0.8, 92.0], [0.9, 94.0], [1.0, 103.0], [1.1, 107.0], [1.2, 110.0], [1.3, 115.0], [1.4, 119.0], [1.5, 124.0], [1.6, 131.0], [1.7, 141.0], [1.8, 146.0], [1.9, 151.0], [2.0, 158.0], [2.1, 165.0], [2.2, 176.0], [2.3, 181.0], [2.4, 188.0], [2.5, 194.0], [2.6, 202.0], [2.7, 208.0], [2.8, 213.0], [2.9, 219.0], [3.0, 233.0], [3.1, 246.0], [3.2, 257.0], [3.3, 262.0], [3.4, 275.0], [3.5, 281.0], [3.6, 286.0], [3.7, 292.0], [3.8, 298.0], [3.9, 300.0], [4.0, 303.0], [4.1, 309.0], [4.2, 315.0], [4.3, 319.0], [4.4, 328.0], [4.5, 334.0], [4.6, 337.0], [4.7, 340.0], [4.8, 345.0], [4.9, 353.0], [5.0, 358.0], [5.1, 364.0], [5.2, 369.0], [5.3, 376.0], [5.4, 382.0], [5.5, 386.0], [5.6, 391.0], [5.7, 397.0], [5.8, 401.0], [5.9, 405.0], [6.0, 409.0], [6.1, 413.0], [6.2, 418.0], [6.3, 420.0], [6.4, 423.0], [6.5, 426.0], [6.6, 433.0], [6.7, 436.0], [6.8, 442.0], [6.9, 448.0], [7.0, 453.0], [7.1, 455.0], [7.2, 458.0], [7.3, 460.0], [7.4, 464.0], [7.5, 467.0], [7.6, 469.0], [7.7, 472.0], [7.8, 475.0], [7.9, 479.0], [8.0, 483.0], [8.1, 487.0], [8.2, 494.0], [8.3, 499.0], [8.4, 503.0], [8.5, 505.0], [8.6, 510.0], [8.7, 516.0], [8.8, 519.0], [8.9, 522.0], [9.0, 525.0], [9.1, 529.0], [9.2, 533.0], [9.3, 537.0], [9.4, 543.0], [9.5, 546.0], [9.6, 551.0], [9.7, 554.0], [9.8, 557.0], [9.9, 561.0], [10.0, 568.0], [10.1, 573.0], [10.2, 577.0], [10.3, 580.0], [10.4, 585.0], [10.5, 589.0], [10.6, 593.0], [10.7, 598.0], [10.8, 601.0], [10.9, 604.0], [11.0, 608.0], [11.1, 612.0], [11.2, 615.0], [11.3, 619.0], [11.4, 621.0], [11.5, 627.0], [11.6, 635.0], [11.7, 638.0], [11.8, 641.0], [11.9, 650.0], [12.0, 656.0], [12.1, 661.0], [12.2, 664.0], [12.3, 672.0], [12.4, 678.0], [12.5, 683.0], [12.6, 690.0], [12.7, 695.0], [12.8, 703.0], [12.9, 707.0], [13.0, 715.0], [13.1, 720.0], [13.2, 724.0], [13.3, 728.0], [13.4, 733.0], [13.5, 740.0], [13.6, 746.0], [13.7, 753.0], [13.8, 765.0], [13.9, 774.0], [14.0, 778.0], [14.1, 792.0], [14.2, 802.0], [14.3, 812.0], [14.4, 827.0], [14.5, 840.0], [14.6, 848.0], [14.7, 856.0], [14.8, 868.0], [14.9, 874.0], [15.0, 888.0], [15.1, 902.0], [15.2, 921.0], [15.3, 930.0], [15.4, 941.0], [15.5, 951.0], [15.6, 963.0], [15.7, 972.0], [15.8, 982.0], [15.9, 994.0], [16.0, 1013.0], [16.1, 1028.0], [16.2, 1035.0], [16.3, 1045.0], [16.4, 1058.0], [16.5, 1069.0], [16.6, 1083.0], [16.7, 1095.0], [16.8, 1126.0], [16.9, 1148.0], [17.0, 1194.0], [17.1, 1216.0], [17.2, 1236.0], [17.3, 1252.0], [17.4, 1294.0], [17.5, 1316.0], [17.6, 1359.0], [17.7, 1426.0], [17.8, 1483.0], [17.9, 1539.0], [18.0, 1591.0], [18.1, 1675.0], [18.2, 1733.0], [18.3, 1771.0], [18.4, 1853.0], [18.5, 1947.0], [18.6, 2008.0], [18.7, 2092.0], [18.8, 2149.0], [18.9, 2297.0], [19.0, 2353.0], [19.1, 2404.0], [19.2, 2459.0], [19.3, 2518.0], [19.4, 2550.0], [19.5, 2579.0], [19.6, 2622.0], [19.7, 2651.0], [19.8, 2709.0], [19.9, 2747.0], [20.0, 2784.0], [20.1, 2821.0], [20.2, 2878.0], [20.3, 2952.0], [20.4, 3008.0], [20.5, 3057.0], [20.6, 3072.0], [20.7, 3121.0], [20.8, 3148.0], [20.9, 3182.0], [21.0, 3229.0], [21.1, 3288.0], [21.2, 3316.0], [21.3, 3390.0], [21.4, 3438.0], [21.5, 3466.0], [21.6, 3485.0], [21.7, 3517.0], [21.8, 3535.0], [21.9, 3577.0], [22.0, 3606.0], [22.1, 3629.0], [22.2, 3649.0], [22.3, 3664.0], [22.4, 3687.0], [22.5, 3704.0], [22.6, 3724.0], [22.7, 3743.0], [22.8, 3763.0], [22.9, 3781.0], [23.0, 3808.0], [23.1, 3835.0], [23.2, 3851.0], [23.3, 3874.0], [23.4, 3889.0], [23.5, 3916.0], [23.6, 3930.0], [23.7, 3956.0], [23.8, 3970.0], [23.9, 3983.0], [24.0, 3995.0], [24.1, 4008.0], [24.2, 4017.0], [24.3, 4038.0], [24.4, 4050.0], [24.5, 4058.0], [24.6, 4070.0], [24.7, 4083.0], [24.8, 4102.0], [24.9, 4113.0], [25.0, 4122.0], [25.1, 4140.0], [25.2, 4151.0], [25.3, 4159.0], [25.4, 4178.0], [25.5, 4203.0], [25.6, 4216.0], [25.7, 4228.0], [25.8, 4235.0], [25.9, 4244.0], [26.0, 4258.0], [26.1, 4275.0], [26.2, 4288.0], [26.3, 4296.0], [26.4, 4301.0], [26.5, 4306.0], [26.6, 4310.0], [26.7, 4322.0], [26.8, 4329.0], [26.9, 4335.0], [27.0, 4341.0], [27.1, 4348.0], [27.2, 4357.0], [27.3, 4364.0], [27.4, 4372.0], [27.5, 4376.0], [27.6, 4381.0], [27.7, 4385.0], [27.8, 4389.0], [27.9, 4391.0], [28.0, 4393.0], [28.1, 4396.0], [28.2, 4403.0], [28.3, 4408.0], [28.4, 4415.0], [28.5, 4421.0], [28.6, 4425.0], [28.7, 4432.0], [28.8, 4439.0], [28.9, 4449.0], [29.0, 4454.0], [29.1, 4460.0], [29.2, 4467.0], [29.3, 4473.0], [29.4, 4478.0], [29.5, 4484.0], [29.6, 4487.0], [29.7, 4493.0], [29.8, 4496.0], [29.9, 4501.0], [30.0, 4506.0], [30.1, 4510.0], [30.2, 4514.0], [30.3, 4519.0], [30.4, 4526.0], [30.5, 4530.0], [30.6, 4532.0], [30.7, 4535.0], [30.8, 4539.0], [30.9, 4541.0], [31.0, 4546.0], [31.1, 4550.0], [31.2, 4559.0], [31.3, 4564.0], [31.4, 4566.0], [31.5, 4569.0], [31.6, 4572.0], [31.7, 4575.0], [31.8, 4580.0], [31.9, 4583.0], [32.0, 4586.0], [32.1, 4589.0], [32.2, 4590.0], [32.3, 4593.0], [32.4, 4596.0], [32.5, 4600.0], [32.6, 4603.0], [32.7, 4605.0], [32.8, 4608.0], [32.9, 4610.0], [33.0, 4612.0], [33.1, 4616.0], [33.2, 4617.0], [33.3, 4621.0], [33.4, 4625.0], [33.5, 4629.0], [33.6, 4631.0], [33.7, 4633.0], [33.8, 4636.0], [33.9, 4639.0], [34.0, 4644.0], [34.1, 4647.0], [34.2, 4650.0], [34.3, 4653.0], [34.4, 4658.0], [34.5, 4660.0], [34.6, 4663.0], [34.7, 4666.0], [34.8, 4667.0], [34.9, 4671.0], [35.0, 4674.0], [35.1, 4676.0], [35.2, 4678.0], [35.3, 4681.0], [35.4, 4684.0], [35.5, 4688.0], [35.6, 4690.0], [35.7, 4695.0], [35.8, 4697.0], [35.9, 4699.0], [36.0, 4704.0], [36.1, 4706.0], [36.2, 4708.0], [36.3, 4710.0], [36.4, 4713.0], [36.5, 4715.0], [36.6, 4717.0], [36.7, 4721.0], [36.8, 4724.0], [36.9, 4725.0], [37.0, 4729.0], [37.1, 4733.0], [37.2, 4735.0], [37.3, 4738.0], [37.4, 4741.0], [37.5, 4744.0], [37.6, 4745.0], [37.7, 4747.0], [37.8, 4749.0], [37.9, 4752.0], [38.0, 4755.0], [38.1, 4757.0], [38.2, 4759.0], [38.3, 4762.0], [38.4, 4763.0], [38.5, 4766.0], [38.6, 4767.0], [38.7, 4770.0], [38.8, 4772.0], [38.9, 4775.0], [39.0, 4777.0], [39.1, 4780.0], [39.2, 4783.0], [39.3, 4786.0], [39.4, 4788.0], [39.5, 4793.0], [39.6, 4797.0], [39.7, 4801.0], [39.8, 4805.0], [39.9, 4810.0], [40.0, 4813.0], [40.1, 4815.0], [40.2, 4820.0], [40.3, 4825.0], [40.4, 4829.0], [40.5, 4831.0], [40.6, 4834.0], [40.7, 4836.0], [40.8, 4839.0], [40.9, 4841.0], [41.0, 4846.0], [41.1, 4849.0], [41.2, 4854.0], [41.3, 4857.0], [41.4, 4861.0], [41.5, 4865.0], [41.6, 4869.0], [41.7, 4872.0], [41.8, 4876.0], [41.9, 4882.0], [42.0, 4885.0], [42.1, 4888.0], [42.2, 4892.0], [42.3, 4896.0], [42.4, 4900.0], [42.5, 4903.0], [42.6, 4907.0], [42.7, 4910.0], [42.8, 4913.0], [42.9, 4918.0], [43.0, 4920.0], [43.1, 4923.0], [43.2, 4925.0], [43.3, 4928.0], [43.4, 4931.0], [43.5, 4933.0], [43.6, 4935.0], [43.7, 4939.0], [43.8, 4940.0], [43.9, 4943.0], [44.0, 4946.0], [44.1, 4949.0], [44.2, 4952.0], [44.3, 4955.0], [44.4, 4958.0], [44.5, 4959.0], [44.6, 4961.0], [44.7, 4964.0], [44.8, 4966.0], [44.9, 4968.0], [45.0, 4970.0], [45.1, 4973.0], [45.2, 4976.0], [45.3, 4978.0], [45.4, 4980.0], [45.5, 4983.0], [45.6, 4986.0], [45.7, 4989.0], [45.8, 4992.0], [45.9, 4994.0], [46.0, 4996.0], [46.1, 4997.0], [46.2, 5000.0], [46.3, 5002.0], [46.4, 5003.0], [46.5, 5005.0], [46.6, 5007.0], [46.7, 5010.0], [46.8, 5011.0], [46.9, 5013.0], [47.0, 5014.0], [47.1, 5015.0], [47.2, 5017.0], [47.3, 5021.0], [47.4, 5023.0], [47.5, 5026.0], [47.6, 5030.0], [47.7, 5032.0], [47.8, 5035.0], [47.9, 5037.0], [48.0, 5039.0], [48.1, 5040.0], [48.2, 5043.0], [48.3, 5046.0], [48.4, 5050.0], [48.5, 5054.0], [48.6, 5058.0], [48.7, 5060.0], [48.8, 5064.0], [48.9, 5066.0], [49.0, 5069.0], [49.1, 5073.0], [49.2, 5077.0], [49.3, 5079.0], [49.4, 5085.0], [49.5, 5089.0], [49.6, 5090.0], [49.7, 5093.0], [49.8, 5097.0], [49.9, 5100.0], [50.0, 5102.0], [50.1, 5104.0], [50.2, 5106.0], [50.3, 5108.0], [50.4, 5111.0], [50.5, 5116.0], [50.6, 5120.0], [50.7, 5123.0], [50.8, 5128.0], [50.9, 5135.0], [51.0, 5140.0], [51.1, 5143.0], [51.2, 5145.0], [51.3, 5149.0], [51.4, 5153.0], [51.5, 5155.0], [51.6, 5157.0], [51.7, 5161.0], [51.8, 5166.0], [51.9, 5170.0], [52.0, 5175.0], [52.1, 5177.0], [52.2, 5180.0], [52.3, 5182.0], [52.4, 5187.0], [52.5, 5190.0], [52.6, 5193.0], [52.7, 5196.0], [52.8, 5203.0], [52.9, 5207.0], [53.0, 5210.0], [53.1, 5215.0], [53.2, 5218.0], [53.3, 5222.0], [53.4, 5226.0], [53.5, 5232.0], [53.6, 5235.0], [53.7, 5239.0], [53.8, 5240.0], [53.9, 5243.0], [54.0, 5246.0], [54.1, 5250.0], [54.2, 5257.0], [54.3, 5261.0], [54.4, 5266.0], [54.5, 5272.0], [54.6, 5278.0], [54.7, 5283.0], [54.8, 5285.0], [54.9, 5287.0], [55.0, 5290.0], [55.1, 5293.0], [55.2, 5296.0], [55.3, 5301.0], [55.4, 5304.0], [55.5, 5308.0], [55.6, 5314.0], [55.7, 5318.0], [55.8, 5321.0], [55.9, 5325.0], [56.0, 5330.0], [56.1, 5334.0], [56.2, 5338.0], [56.3, 5342.0], [56.4, 5347.0], [56.5, 5353.0], [56.6, 5358.0], [56.7, 5363.0], [56.8, 5365.0], [56.9, 5370.0], [57.0, 5372.0], [57.1, 5374.0], [57.2, 5378.0], [57.3, 5383.0], [57.4, 5386.0], [57.5, 5392.0], [57.6, 5394.0], [57.7, 5398.0], [57.8, 5401.0], [57.9, 5408.0], [58.0, 5413.0], [58.1, 5419.0], [58.2, 5424.0], [58.3, 5430.0], [58.4, 5438.0], [58.5, 5443.0], [58.6, 5447.0], [58.7, 5453.0], [58.8, 5457.0], [58.9, 5462.0], [59.0, 5468.0], [59.1, 5477.0], [59.2, 5482.0], [59.3, 5485.0], [59.4, 5493.0], [59.5, 5498.0], [59.6, 5504.0], [59.7, 5508.0], [59.8, 5510.0], [59.9, 5515.0], [60.0, 5519.0], [60.1, 5522.0], [60.2, 5528.0], [60.3, 5535.0], [60.4, 5541.0], [60.5, 5545.0], [60.6, 5552.0], [60.7, 5556.0], [60.8, 5566.0], [60.9, 5572.0], [61.0, 5575.0], [61.1, 5580.0], [61.2, 5584.0], [61.3, 5587.0], [61.4, 5592.0], [61.5, 5598.0], [61.6, 5605.0], [61.7, 5612.0], [61.8, 5616.0], [61.9, 5623.0], [62.0, 5632.0], [62.1, 5637.0], [62.2, 5641.0], [62.3, 5646.0], [62.4, 5649.0], [62.5, 5653.0], [62.6, 5657.0], [62.7, 5664.0], [62.8, 5668.0], [62.9, 5671.0], [63.0, 5678.0], [63.1, 5691.0], [63.2, 5695.0], [63.3, 5701.0], [63.4, 5706.0], [63.5, 5716.0], [63.6, 5723.0], [63.7, 5731.0], [63.8, 5749.0], [63.9, 5757.0], [64.0, 5765.0], [64.1, 5773.0], [64.2, 5775.0], [64.3, 5781.0], [64.4, 5788.0], [64.5, 5792.0], [64.6, 5797.0], [64.7, 5801.0], [64.8, 5806.0], [64.9, 5816.0], [65.0, 5819.0], [65.1, 5823.0], [65.2, 5827.0], [65.3, 5835.0], [65.4, 5842.0], [65.5, 5844.0], [65.6, 5851.0], [65.7, 5855.0], [65.8, 5863.0], [65.9, 5873.0], [66.0, 5878.0], [66.1, 5886.0], [66.2, 5894.0], [66.3, 5903.0], [66.4, 5919.0], [66.5, 5930.0], [66.6, 5935.0], [66.7, 5946.0], [66.8, 5952.0], [66.9, 5961.0], [67.0, 5967.0], [67.1, 5972.0], [67.2, 5980.0], [67.3, 5983.0], [67.4, 5991.0], [67.5, 6000.0], [67.6, 6015.0], [67.7, 6021.0], [67.8, 6024.0], [67.9, 6029.0], [68.0, 6034.0], [68.1, 6039.0], [68.2, 6042.0], [68.3, 6046.0], [68.4, 6050.0], [68.5, 6053.0], [68.6, 6055.0], [68.7, 6061.0], [68.8, 6068.0], [68.9, 6077.0], [69.0, 6087.0], [69.1, 6098.0], [69.2, 6108.0], [69.3, 6112.0], [69.4, 6122.0], [69.5, 6131.0], [69.6, 6141.0], [69.7, 6148.0], [69.8, 6155.0], [69.9, 6162.0], [70.0, 6172.0], [70.1, 6181.0], [70.2, 6187.0], [70.3, 6204.0], [70.4, 6217.0], [70.5, 6231.0], [70.6, 6243.0], [70.7, 6254.0], [70.8, 6264.0], [70.9, 6276.0], [71.0, 6282.0], [71.1, 6292.0], [71.2, 6303.0], [71.3, 6316.0], [71.4, 6323.0], [71.5, 6336.0], [71.6, 6342.0], [71.7, 6353.0], [71.8, 6359.0], [71.9, 6366.0], [72.0, 6377.0], [72.1, 6389.0], [72.2, 6398.0], [72.3, 6406.0], [72.4, 6418.0], [72.5, 6429.0], [72.6, 6444.0], [72.7, 6457.0], [72.8, 6466.0], [72.9, 6481.0], [73.0, 6494.0], [73.1, 6507.0], [73.2, 6520.0], [73.3, 6531.0], [73.4, 6551.0], [73.5, 6561.0], [73.6, 6570.0], [73.7, 6587.0], [73.8, 6604.0], [73.9, 6613.0], [74.0, 6621.0], [74.1, 6627.0], [74.2, 6634.0], [74.3, 6642.0], [74.4, 6652.0], [74.5, 6659.0], [74.6, 6665.0], [74.7, 6667.0], [74.8, 6670.0], [74.9, 6679.0], [75.0, 6687.0], [75.1, 6694.0], [75.2, 6702.0], [75.3, 6707.0], [75.4, 6718.0], [75.5, 6729.0], [75.6, 6737.0], [75.7, 6742.0], [75.8, 6746.0], [75.9, 6751.0], [76.0, 6766.0], [76.1, 6777.0], [76.2, 6790.0], [76.3, 6800.0], [76.4, 6808.0], [76.5, 6815.0], [76.6, 6822.0], [76.7, 6829.0], [76.8, 6838.0], [76.9, 6842.0], [77.0, 6850.0], [77.1, 6855.0], [77.2, 6862.0], [77.3, 6872.0], [77.4, 6877.0], [77.5, 6884.0], [77.6, 6893.0], [77.7, 6907.0], [77.8, 6915.0], [77.9, 6927.0], [78.0, 6939.0], [78.1, 6945.0], [78.2, 6954.0], [78.3, 6963.0], [78.4, 6976.0], [78.5, 6981.0], [78.6, 6991.0], [78.7, 7004.0], [78.8, 7010.0], [78.9, 7020.0], [79.0, 7039.0], [79.1, 7050.0], [79.2, 7062.0], [79.3, 7073.0], [79.4, 7086.0], [79.5, 7108.0], [79.6, 7124.0], [79.7, 7141.0], [79.8, 7153.0], [79.9, 7167.0], [80.0, 7180.0], [80.1, 7201.0], [80.2, 7212.0], [80.3, 7224.0], [80.4, 7231.0], [80.5, 7238.0], [80.6, 7250.0], [80.7, 7263.0], [80.8, 7279.0], [80.9, 7298.0], [81.0, 7313.0], [81.1, 7325.0], [81.2, 7345.0], [81.3, 7361.0], [81.4, 7371.0], [81.5, 7393.0], [81.6, 7419.0], [81.7, 7450.0], [81.8, 7474.0], [81.9, 7485.0], [82.0, 7513.0], [82.1, 7540.0], [82.2, 7566.0], [82.3, 7573.0], [82.4, 7587.0], [82.5, 7605.0], [82.6, 7632.0], [82.7, 7652.0], [82.8, 7671.0], [82.9, 7694.0], [83.0, 7718.0], [83.1, 7738.0], [83.2, 7764.0], [83.3, 7783.0], [83.4, 7815.0], [83.5, 7862.0], [83.6, 7881.0], [83.7, 7897.0], [83.8, 7926.0], [83.9, 7942.0], [84.0, 7950.0], [84.1, 7954.0], [84.2, 7975.0], [84.3, 7982.0], [84.4, 7997.0], [84.5, 8005.0], [84.6, 8022.0], [84.7, 8037.0], [84.8, 8066.0], [84.9, 8095.0], [85.0, 8117.0], [85.1, 8140.0], [85.2, 8174.0], [85.3, 8236.0], [85.4, 8263.0], [85.5, 8284.0], [85.6, 8304.0], [85.7, 8329.0], [85.8, 8366.0], [85.9, 8395.0], [86.0, 8434.0], [86.1, 8463.0], [86.2, 8488.0], [86.3, 8502.0], [86.4, 8530.0], [86.5, 8544.0], [86.6, 8567.0], [86.7, 8587.0], [86.8, 8614.0], [86.9, 8662.0], [87.0, 8691.0], [87.1, 8723.0], [87.2, 8753.0], [87.3, 8762.0], [87.4, 8776.0], [87.5, 8800.0], [87.6, 8828.0], [87.7, 8868.0], [87.8, 8895.0], [87.9, 8918.0], [88.0, 8950.0], [88.1, 9000.0], [88.2, 9060.0], [88.3, 9109.0], [88.4, 9189.0], [88.5, 9239.0], [88.6, 9258.0], [88.7, 9294.0], [88.8, 9366.0], [88.9, 9395.0], [89.0, 9441.0], [89.1, 9492.0], [89.2, 9523.0], [89.3, 9572.0], [89.4, 9602.0], [89.5, 9637.0], [89.6, 9662.0], [89.7, 9696.0], [89.8, 9720.0], [89.9, 9737.0], [90.0, 9783.0], [90.1, 9839.0], [90.2, 9887.0], [90.3, 9923.0], [90.4, 9954.0], [90.5, 10015.0], [90.6, 10073.0], [90.7, 10092.0], [90.8, 10136.0], [90.9, 10199.0], [91.0, 10236.0], [91.1, 10268.0], [91.2, 10320.0], [91.3, 10356.0], [91.4, 10375.0], [91.5, 10439.0], [91.6, 10472.0], [91.7, 10497.0], [91.8, 10531.0], [91.9, 10564.0], [92.0, 10580.0], [92.1, 10626.0], [92.2, 10652.0], [92.3, 10721.0], [92.4, 10806.0], [92.5, 10890.0], [92.6, 10944.0], [92.7, 10968.0], [92.8, 11030.0], [92.9, 11077.0], [93.0, 11119.0], [93.1, 11169.0], [93.2, 11197.0], [93.3, 11252.0], [93.4, 11288.0], [93.5, 11352.0], [93.6, 11369.0], [93.7, 11429.0], [93.8, 11497.0], [93.9, 11553.0], [94.0, 11611.0], [94.1, 11651.0], [94.2, 11700.0], [94.3, 11722.0], [94.4, 11755.0], [94.5, 11838.0], [94.6, 11913.0], [94.7, 12020.0], [94.8, 12103.0], [94.9, 12163.0], [95.0, 12193.0], [95.1, 12227.0], [95.2, 12263.0], [95.3, 12303.0], [95.4, 12369.0], [95.5, 12392.0], [95.6, 12418.0], [95.7, 12497.0], [95.8, 12546.0], [95.9, 12565.0], [96.0, 12593.0], [96.1, 12664.0], [96.2, 12707.0], [96.3, 12732.0], [96.4, 12777.0], [96.5, 12829.0], [96.6, 12862.0], [96.7, 12875.0], [96.8, 12926.0], [96.9, 12953.0], [97.0, 13012.0], [97.1, 13048.0], [97.2, 13082.0], [97.3, 13169.0], [97.4, 13218.0], [97.5, 13274.0], [97.6, 13318.0], [97.7, 13361.0], [97.8, 13395.0], [97.9, 13426.0], [98.0, 13484.0], [98.1, 13520.0], [98.2, 13597.0], [98.3, 13681.0], [98.4, 13710.0], [98.5, 13744.0], [98.6, 13766.0], [98.7, 13790.0], [98.8, 13816.0], [98.9, 13838.0], [99.0, 13868.0], [99.1, 13917.0], [99.2, 13966.0], [99.3, 13986.0], [99.4, 14016.0], [99.5, 14062.0], [99.6, 14110.0], [99.7, 14174.0], [99.8, 14351.0], [99.9, 14787.0], [100.0, 17418.0]], "isOverall": false, "label": "Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 379.0, "series": [{"data": [[0.0, 94.0], [100.0, 165.0], [200.0, 125.0], [300.0, 195.0], [400.0, 254.0], [500.0, 245.0], [600.0, 198.0], [700.0, 144.0], [800.0, 88.0], [900.0, 85.0], [1000.0, 79.0], [1100.0, 33.0], [1200.0, 41.0], [1300.0, 21.0], [1400.0, 15.0], [1500.0, 21.0], [1600.0, 10.0], [1700.0, 19.0], [1800.0, 12.0], [1900.0, 15.0], [2000.0, 13.0], [2100.0, 13.0], [2200.0, 5.0], [2300.0, 18.0], [2400.0, 16.0], [2500.0, 31.0], [2600.0, 23.0], [2700.0, 24.0], [2800.0, 21.0], [2900.0, 15.0], [3000.0, 29.0], [3100.0, 26.0], [3200.0, 21.0], [3300.0, 18.0], [3400.0, 31.0], [3500.0, 30.0], [3600.0, 52.0], [3700.0, 53.0], [3800.0, 45.0], [3900.0, 60.0], [4000.0, 75.0], [4100.0, 70.0], [4200.0, 88.0], [4300.0, 181.0], [4400.0, 168.0], [4500.0, 259.0], [4600.0, 347.0], [4700.0, 373.0], [4800.0, 273.0], [4900.0, 379.0], [5000.0, 373.0], [5100.0, 287.0], [5200.0, 253.0], [5300.0, 246.0], [5400.0, 175.0], [5500.0, 202.0], [5600.0, 174.0], [5700.0, 140.0], [5800.0, 163.0], [5900.0, 120.0], [6000.0, 165.0], [6100.0, 112.0], [6200.0, 88.0], [6300.0, 106.0], [6400.0, 84.0], [6600.0, 140.0], [6500.0, 73.0], [6700.0, 111.0], [6800.0, 137.0], [6900.0, 102.0], [7000.0, 79.0], [7100.0, 62.0], [7200.0, 83.0], [7300.0, 61.0], [7400.0, 45.0], [7500.0, 49.0], [7600.0, 47.0], [7700.0, 40.0], [7800.0, 37.0], [7900.0, 74.0], [8000.0, 48.0], [8100.0, 31.0], [8200.0, 32.0], [8300.0, 35.0], [8400.0, 39.0], [8500.0, 47.0], [8600.0, 28.0], [8700.0, 45.0], [8800.0, 32.0], [8900.0, 28.0], [9100.0, 17.0], [9200.0, 30.0], [9000.0, 15.0], [9700.0, 33.0], [9500.0, 28.0], [9400.0, 20.0], [9600.0, 31.0], [9300.0, 20.0], [10200.0, 25.0], [9800.0, 23.0], [10100.0, 19.0], [9900.0, 20.0], [10000.0, 25.0], [10500.0, 34.0], [10300.0, 27.0], [10700.0, 15.0], [10400.0, 28.0], [10600.0, 20.0], [11200.0, 21.0], [10900.0, 24.0], [11000.0, 16.0], [10800.0, 12.0], [11100.0, 29.0], [11700.0, 26.0], [11600.0, 21.0], [11300.0, 25.0], [11500.0, 18.0], [11400.0, 14.0], [12100.0, 24.0], [11900.0, 13.0], [12000.0, 10.0], [12200.0, 25.0], [11800.0, 10.0], [12600.0, 17.0], [12700.0, 27.0], [12500.0, 31.0], [12300.0, 23.0], [12400.0, 20.0], [12900.0, 24.0], [12800.0, 28.0], [13000.0, 26.0], [13300.0, 25.0], [13100.0, 13.0], [13200.0, 19.0], [13600.0, 15.0], [13400.0, 26.0], [13500.0, 14.0], [13700.0, 37.0], [13800.0, 34.0], [14000.0, 27.0], [14100.0, 11.0], [14200.0, 7.0], [14300.0, 5.0], [13900.0, 26.0], [14600.0, 3.0], [14500.0, 2.0], [14400.0, 2.0], [14800.0, 1.0], [14700.0, 1.0], [14900.0, 3.0], [15100.0, 1.0], [15400.0, 1.0], [15600.0, 1.0], [16400.0, 1.0], [17400.0, 1.0], [17300.0, 1.0]], "isOverall": false, "label": "Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 834.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 7000.0, "series": [{"data": [[0.0, 834.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 943.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 1223.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 7000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 97.19732441471574, "minX": 1.629245068E12, "maxY": 1000.0, "series": [{"data": [[1.629245121E12, 419.04938271604937], [1.629245078E12, 1000.0], [1.62924508E12, 1000.0], [1.629245123E12, 219.40064102564102], [1.629245082E12, 1000.0], [1.629245084E12, 1000.0], [1.629245086E12, 1000.0], [1.629245088E12, 1000.0], [1.62924509E12, 1000.0], [1.629245092E12, 1000.0], [1.629245094E12, 1000.0], [1.629245096E12, 1000.0], [1.629245098E12, 1000.0], [1.629245099E12, 1000.0], [1.629245101E12, 1000.0], [1.629245103E12, 1000.0], [1.629245105E12, 1000.0], [1.629245107E12, 1000.0], [1.629245109E12, 1000.0], [1.629245068E12, 1000.0], [1.629245111E12, 1000.0], [1.629245113E12, 978.0918367346937], [1.62924507E12, 1000.0], [1.629245072E12, 1000.0], [1.629245115E12, 901.9036144578314], [1.629245117E12, 783.9818181818182], [1.629245074E12, 1000.0], [1.629245076E12, 1000.0], [1.629245119E12, 622.3076923076927], [1.629245079E12, 1000.0], [1.629245122E12, 324.58064516129036], [1.629245081E12, 1000.0], [1.629245124E12, 97.19732441471574], [1.629245083E12, 1000.0], [1.629245085E12, 1000.0], [1.629245087E12, 1000.0], [1.629245089E12, 1000.0], [1.629245091E12, 1000.0], [1.629245093E12, 1000.0], [1.629245095E12, 1000.0], [1.629245097E12, 1000.0], [1.6292451E12, 1000.0], [1.629245102E12, 1000.0], [1.629245104E12, 1000.0], [1.629245106E12, 1000.0], [1.629245108E12, 1000.0], [1.62924511E12, 1000.0], [1.629245069E12, 1000.0], [1.629245112E12, 999.5384615384615], [1.629245071E12, 1000.0], [1.629245114E12, 941.8125000000003], [1.629245073E12, 1000.0], [1.629245116E12, 847.8909952606638], [1.629245075E12, 1000.0], [1.629245118E12, 712.7832699619775], [1.629245077E12, 1000.0], [1.62924512E12, 530.5355932203391]], "isOverall": false, "label": "Grupo de Hilos", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.629245124E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.0, "maxY": 12787.75, "series": [{"data": [[2.0, 80.0], [3.0, 86.0], [4.0, 87.0], [5.0, 92.0], [6.0, 94.0], [7.0, 106.0], [8.0, 107.0], [9.0, 151.5], [10.0, 184.0], [11.0, 167.0], [12.0, 188.0], [13.0, 196.0], [14.0, 201.0], [15.0, 208.0], [16.0, 218.0], [17.0, 219.0], [18.0, 219.0], [19.0, 198.0], [20.0, 204.0], [21.0, 210.0], [22.0, 211.0], [23.0, 215.5], [24.0, 257.5], [25.0, 258.0], [26.0, 261.0], [27.0, 286.0], [28.0, 286.0], [29.0, 288.0], [30.0, 289.5], [31.0, 289.0], [33.0, 294.0], [32.0, 292.0], [35.0, 293.0], [34.0, 294.0], [37.0, 301.0], [36.0, 293.0], [39.0, 300.0], [38.0, 300.5], [41.0, 309.0], [40.0, 300.5], [43.0, 299.0], [42.0, 298.5], [45.0, 299.0], [44.0, 298.0], [47.0, 300.0], [46.0, 300.0], [49.0, 337.0], [48.0, 337.0], [51.0, 342.0], [50.0, 337.0], [53.0, 315.5], [52.0, 337.0], [55.0, 322.5], [54.0, 319.0], [57.0, 319.5], [56.0, 327.0], [59.0, 307.0], [58.0, 314.0], [61.0, 329.0], [60.0, 319.0], [63.0, 341.0], [62.0, 334.0], [67.0, 440.0], [66.0, 424.0], [65.0, 418.5], [64.0, 384.0], [71.0, 312.0], [70.0, 370.0], [69.0, 467.0], [68.0, 331.0], [75.0, 312.0], [74.0, 455.0], [73.0, 394.0], [72.0, 614.0], [79.0, 547.0], [78.0, 476.6666666666667], [77.0, 521.5], [76.0, 396.5], [83.0, 847.0], [82.0, 369.0], [81.0, 379.0], [80.0, 586.5], [87.0, 400.0], [86.0, 1762.0], [85.0, 4154.0], [84.0, 857.0], [91.0, 314.0], [90.0, 471.0], [89.0, 368.0], [88.0, 445.0], [95.0, 780.0], [94.0, 1597.5], [93.0, 360.0], [92.0, 1982.0], [99.0, 395.0], [98.0, 398.0], [97.0, 401.0], [96.0, 900.0], [103.0, 860.3333333333334], [102.0, 1324.0], [101.0, 1793.1249999999998], [100.0, 1293.5], [107.0, 441.0], [106.0, 386.0], [105.0, 758.25], [104.0, 433.0], [111.0, 3210.5], [110.0, 2080.25], [109.0, 475.0], [108.0, 693.0], [115.0, 2030.0], [114.0, 843.0], [113.0, 915.3333333333334], [112.0, 415.0], [119.0, 1463.8], [118.0, 2242.5], [117.0, 337.0], [116.0, 663.0], [123.0, 443.0], [122.0, 830.0], [121.0, 507.0], [120.0, 425.0], [127.0, 663.3333333333334], [126.0, 499.5], [125.0, 439.5], [124.0, 440.0], [135.0, 394.0], [134.0, 637.5], [133.0, 435.5], [132.0, 844.0], [131.0, 1597.75], [130.0, 415.0], [129.0, 1714.3333333333335], [128.0, 1045.0], [143.0, 2446.0], [142.0, 470.0], [141.0, 410.0], [140.0, 604.0], [139.0, 422.0], [138.0, 1119.2], [137.0, 1874.6666666666665], [136.0, 1423.1666666666667], [151.0, 1483.0], [150.0, 900.0], [149.0, 423.0], [148.0, 778.0], [147.0, 4464.333333333333], [146.0, 773.0], [145.0, 434.0], [144.0, 812.0], [159.0, 941.7142857142857], [158.0, 4690.0], [157.0, 433.0], [156.0, 3404.0], [155.0, 618.0], [154.0, 632.0], [153.0, 728.75], [152.0, 580.0], [167.0, 1152.0], [166.0, 1400.0], [165.0, 4287.428571428572], [164.0, 351.0], [163.0, 3907.0], [162.0, 827.0], [161.0, 3042.666666666667], [160.0, 1445.0], [175.0, 1148.0], [174.0, 1593.5], [173.0, 301.0], [172.0, 975.0], [171.0, 535.3333333333334], [170.0, 1101.5], [169.0, 1679.6], [168.0, 983.0], [183.0, 3148.083333333333], [182.0, 2519.0], [181.0, 587.6666666666666], [180.0, 812.0], [179.0, 657.0], [178.0, 280.0], [177.0, 276.0], [176.0, 571.3333333333334], [191.0, 2457.3846153846152], [190.0, 2608.875], [189.0, 904.7499999999999], [188.0, 577.0], [187.0, 491.0], [186.0, 476.0], [185.0, 631.0], [184.0, 3797.0], [199.0, 483.0], [198.0, 1165.6666666666667], [197.0, 474.0], [196.0, 5294.666666666666], [195.0, 2193.6666666666665], [194.0, 199.0], [193.0, 334.0], [192.0, 339.25], [207.0, 3314.75], [206.0, 2633.0], [205.0, 3523.2857142857147], [204.0, 1936.6666666666665], [203.0, 2608.8333333333335], [202.0, 2232.0], [201.0, 1197.0], [200.0, 499.0], [215.0, 701.0], [214.0, 425.0], [213.0, 3508.5], [212.0, 1605.0], [211.0, 4276.0], [210.0, 1095.0], [209.0, 1868.6666666666665], [208.0, 316.5], [223.0, 476.0], [222.0, 488.0], [221.0, 504.5], [220.0, 546.0], [219.0, 3243.75], [218.0, 3781.5], [217.0, 3816.25], [216.0, 3681.75], [231.0, 378.0], [230.0, 4380.799999999999], [229.0, 303.0], [228.0, 945.0], [227.0, 4026.9999999999995], [226.0, 2914.833333333333], [225.0, 725.0], [224.0, 2902.2], [239.0, 797.0], [238.0, 3399.0], [237.0, 3515.0], [236.0, 4863.0], [235.0, 217.0], [234.0, 325.0], [233.0, 275.0], [232.0, 3856.222222222222], [247.0, 3768.0], [246.0, 295.0], [245.0, 4762.666666666666], [244.0, 275.0], [243.0, 3700.5], [242.0, 262.0], [241.0, 467.0], [240.0, 264.0], [255.0, 731.0], [254.0, 789.0], [253.0, 1048.0], [252.0, 722.0], [251.0, 598.0], [250.0, 5067.25], [249.0, 5343.0], [248.0, 5309.333333333334], [270.0, 7751.5], [271.0, 414.0], [269.0, 663.0], [268.0, 418.0], [267.0, 418.6666666666667], [266.0, 678.0], [265.0, 424.0], [264.0, 2197.75], [263.0, 159.0], [257.0, 6652.714285714285], [256.0, 244.0], [259.0, 3230.0], [258.0, 1262.0], [262.0, 3470.3333333333335], [261.0, 668.0], [260.0, 2577.0], [286.0, 6204.111111111111], [287.0, 6116.307692307692], [285.0, 5338.833333333334], [284.0, 1044.5], [283.0, 1000.3333333333334], [282.0, 966.0], [281.0, 4353.3], [280.0, 8304.2], [279.0, 6412.25], [273.0, 2094.1428571428573], [272.0, 625.0], [275.0, 5626.666666666666], [274.0, 724.0], [278.0, 881.0], [277.0, 4046.1666666666665], [276.0, 720.0], [302.0, 611.0], [303.0, 1196.0], [301.0, 494.8], [300.0, 2936.333333333333], [299.0, 5074.333333333334], [298.0, 9250.0], [297.0, 7902.666666666666], [296.0, 322.5], [295.0, 338.0], [289.0, 344.0], [288.0, 3994.0], [291.0, 1083.0], [290.0, 179.0], [294.0, 360.0], [293.0, 6401.25], [292.0, 930.0], [318.0, 345.5], [319.0, 339.0], [317.0, 704.0], [316.0, 4549.333333333334], [315.0, 366.0], [314.0, 417.0], [313.0, 373.0], [312.0, 352.0], [311.0, 2535.3333333333335], [305.0, 8396.0], [304.0, 620.0], [307.0, 653.0], [306.0, 1222.0], [310.0, 382.0], [309.0, 6049.166666666667], [308.0, 7531.999999999999], [334.0, 3564.75], [335.0, 856.0], [333.0, 7330.0], [332.0, 436.5], [331.0, 316.0], [330.0, 301.0], [329.0, 387.0], [328.0, 455.5], [327.0, 344.0], [321.0, 353.0], [320.0, 4839.2], [323.0, 333.0], [322.0, 552.0], [326.0, 316.0], [325.0, 4749.333333333333], [324.0, 5918.25], [350.0, 5501.043478260869], [351.0, 503.5], [349.0, 9691.666666666668], [348.0, 6765.5], [347.0, 8354.000000000002], [346.0, 770.0], [345.0, 3904.25], [344.0, 3740.0], [343.0, 9038.333333333332], [337.0, 4975.0], [336.0, 523.3333333333334], [339.0, 602.0], [338.0, 2810.333333333333], [342.0, 6612.5], [341.0, 5251.333333333334], [340.0, 567.0], [366.0, 4968.0], [367.0, 664.0], [365.0, 432.0], [364.0, 7165.000000000001], [362.0, 3729.0], [361.0, 681.5], [360.0, 3818.75], [359.0, 4939.666666666666], [353.0, 6938.750000000001], [352.0, 6702.666666666666], [355.0, 5042.0], [354.0, 451.5], [358.0, 417.0], [357.0, 518.0], [356.0, 3096.4], [382.0, 610.0], [383.0, 8377.6], [381.0, 602.0], [380.0, 6917.5], [379.0, 11492.777777777777], [378.0, 1316.0], [377.0, 4055.7499999999995], [376.0, 726.0], [375.0, 6077.6], [369.0, 12115.142857142857], [368.0, 3108.9999999999995], [371.0, 8558.4], [370.0, 7780.0], [374.0, 10247.0], [373.0, 9545.333333333332], [372.0, 7466.0], [398.0, 468.0], [399.0, 628.0], [397.0, 7278.25], [396.0, 594.0], [395.0, 4919.0], [394.0, 8497.2], [393.0, 563.0], [392.0, 5845.2], [391.0, 170.0], [385.0, 576.0], [384.0, 4136.000000000001], [387.0, 10091.142857142857], [386.0, 10437.375], [390.0, 316.0], [389.0, 10975.6], [388.0, 9981.42857142857], [414.0, 8532.8], [415.0, 6974.0], [413.0, 608.0], [412.0, 679.6666666666666], [411.0, 5014.666666666666], [410.0, 1306.0], [409.0, 7128.5], [408.0, 3815.7499999999995], [407.0, 478.0], [400.0, 8511.0], [402.0, 7963.999999999998], [401.0, 8993.0], [406.0, 5000.0], [405.0, 7271.0], [404.0, 476.3333333333333], [430.0, 1017.0], [431.0, 3918.5], [429.0, 541.0], [428.0, 561.0], [427.0, 7165.0], [426.0, 592.0], [425.0, 559.0], [424.0, 1557.0], [423.0, 602.0], [417.0, 12787.75], [416.0, 8753.2], [419.0, 738.0], [418.0, 5842.2], [422.0, 7279.249999999999], [421.0, 5886.4], [420.0, 636.0], [446.0, 7156.0], [447.0, 399.0], [445.0, 422.0], [444.0, 7114.0], [443.0, 489.0], [442.0, 4915.833333333334], [441.0, 3797.0], [440.0, 423.0], [439.0, 572.0], [433.0, 560.0], [432.0, 529.0], [435.0, 776.0], [434.0, 939.0], [438.0, 503.0], [437.0, 517.3333333333334], [436.0, 5883.0], [462.0, 634.0], [463.0, 7129.333333333333], [461.0, 515.0], [460.0, 546.0], [459.0, 404.0], [458.0, 628.0], [457.0, 676.0], [456.0, 681.0], [455.0, 4979.666666666666], [449.0, 475.0], [448.0, 3908.0], [451.0, 5820.6], [450.0, 476.0], [454.0, 6542.75], [453.0, 472.0], [452.0, 525.5], [478.0, 727.5], [479.0, 614.0], [477.0, 513.0], [476.0, 633.3333333333334], [475.0, 583.0], [474.0, 5051.0], [473.0, 7283.5], [472.0, 9029.666666666668], [471.0, 3263.4], [465.0, 4930.0], [464.0, 519.0], [467.0, 865.0], [466.0, 8546.8], [470.0, 650.0], [469.0, 4999.0], [468.0, 4981.333333333334], [494.0, 522.0], [495.0, 553.0], [493.0, 259.0], [492.0, 7017.5], [491.0, 6669.2], [490.0, 9320.333333333332], [489.0, 7509.0], [488.0, 699.0], [487.0, 5038.333333333334], [481.0, 5105.0], [480.0, 790.0], [483.0, 709.0], [482.0, 612.5], [486.0, 713.6666666666666], [485.0, 597.0], [484.0, 744.0], [510.0, 882.5], [511.0, 625.0], [508.0, 4935.0], [499.0, 509.0], [498.0, 617.0], [497.0, 663.75], [496.0, 777.5], [507.0, 972.0], [506.0, 5999.8823529411775], [505.0, 809.0], [504.0, 522.0], [503.0, 3576.5], [502.0, 10835.25], [501.0, 7518.363636363638], [500.0, 5859.5], [540.0, 595.0], [543.0, 587.0], [529.0, 612.0], [528.0, 9020.666666666668], [531.0, 3172.6000000000004], [530.0, 8416.75], [533.0, 622.5], [532.0, 6941.5], [542.0, 578.0], [541.0, 2471.142857142857], [539.0, 517.5], [538.0, 3234.0], [537.0, 8445.947368421053], [536.0, 9125.0], [527.0, 9991.75], [513.0, 639.0], [512.0, 522.0], [515.0, 8554.333333333332], [514.0, 968.6666666666666], [517.0, 7080.0], [516.0, 4946.666666666666], [519.0, 546.0], [518.0, 661.0], [526.0, 275.2], [525.0, 641.0], [524.0, 4918.0], [523.0, 672.0], [522.0, 664.0], [521.0, 665.0], [520.0, 662.0], [535.0, 3211.0], [534.0, 5791.0], [572.0, 582.0], [575.0, 532.0], [561.0, 683.0], [560.0, 517.0], [563.0, 4695.666666666666], [562.0, 6789.0], [565.0, 6918.75], [564.0, 4726.166666666667], [574.0, 545.0], [573.0, 4046.285714285714], [571.0, 483.5], [570.0, 3624.75], [569.0, 460.0], [568.0, 466.0], [559.0, 504.0], [545.0, 935.0], [544.0, 4275.428571428572], [547.0, 4922.333333333333], [546.0, 568.0], [549.0, 543.0], [548.0, 5432.4], [551.0, 4299.285714285714], [550.0, 683.0], [558.0, 7582.428571428572], [557.0, 6701.0], [556.0, 178.0], [555.0, 176.0], [554.0, 3702.25], [553.0, 4586.666666666666], [552.0, 7659.285714285716], [567.0, 6109.555555555556], [566.0, 4949.4], [604.0, 8797.666666666666], [607.0, 555.0], [593.0, 505.0], [592.0, 7604.333333333334], [595.0, 520.0], [594.0, 711.0], [597.0, 6624.0], [596.0, 543.0], [606.0, 150.0], [605.0, 975.0], [603.0, 9785.0], [602.0, 7849.0], [601.0, 778.0], [600.0, 718.5], [591.0, 644.5], [577.0, 8003.6], [576.0, 7100.888888888889], [579.0, 6697.75], [578.0, 4666.666666666667], [581.0, 516.0], [580.0, 7536.5714285714275], [583.0, 7928.0], [582.0, 8857.25], [590.0, 559.0], [589.0, 502.0], [588.0, 530.0], [587.0, 5028.909090909091], [586.0, 385.0], [585.0, 638.0], [584.0, 616.0], [599.0, 4678.666666666667], [598.0, 547.0], [636.0, 6832.0], [639.0, 5467.8], [625.0, 6692.0], [624.0, 6798.0], [627.0, 10587.90909090909], [626.0, 6631.5], [629.0, 7822.6], [628.0, 269.5], [638.0, 4745.666666666667], [637.0, 861.0], [635.0, 6926.5], [634.0, 678.6666666666666], [633.0, 5289.285714285715], [632.0, 6640.0], [623.0, 1045.0], [609.0, 828.0], [608.0, 10237.0], [611.0, 506.0], [610.0, 794.0], [613.0, 520.0], [612.0, 500.0], [615.0, 559.5], [614.0, 766.0], [622.0, 679.0], [621.0, 5561.700000000001], [620.0, 8946.0], [619.0, 9375.285714285714], [618.0, 4213.571428571428], [617.0, 719.0], [616.0, 9803.0], [631.0, 683.6666666666666], [630.0, 4613.333333333333], [668.0, 652.0], [671.0, 204.0], [657.0, 753.0], [656.0, 814.5], [659.0, 6312.875], [658.0, 6703.5], [661.0, 663.6], [660.0, 989.0], [670.0, 7908.499999999998], [669.0, 725.5], [667.0, 6601.0], [666.0, 732.0], [665.0, 4626.666666666667], [664.0, 4596.333333333333], [655.0, 641.0], [641.0, 6310.5], [640.0, 4230.0], [643.0, 4803.0], [642.0, 213.0], [645.0, 8619.666666666666], [644.0, 6564.0], [647.0, 8572.333333333334], [646.0, 6563.25], [654.0, 6621.5], [653.0, 4575.0], [652.0, 573.0], [651.0, 633.0], [650.0, 8665.714285714286], [649.0, 2570.5], [648.0, 592.0], [663.0, 4677.0], [662.0, 6618.5], [700.0, 4098.0], [703.0, 6883.333333333333], [689.0, 8097.333333333334], [688.0, 3602.5], [691.0, 4514.0], [690.0, 8464.5], [693.0, 909.0], [692.0, 713.0], [702.0, 7343.6875], [701.0, 6084.5], [699.0, 131.0], [698.0, 840.0], [697.0, 640.0], [696.0, 1342.0], [687.0, 674.5], [673.0, 263.0], [672.0, 6193.0], [675.0, 7657.166666666666], [674.0, 3556.25], [677.0, 8461.0], [676.0, 549.5], [679.0, 580.0], [678.0, 6664.0], [686.0, 4495.333333333333], [685.0, 984.0], [684.0, 625.0], [683.0, 8065.0], [682.0, 4529.666666666667], [681.0, 597.0], [680.0, 607.0], [695.0, 4550.3], [694.0, 6584.5], [732.0, 7845.25], [735.0, 5985.5], [721.0, 8294.857142857145], [720.0, 8280.333333333334], [723.0, 1036.75], [722.0, 2360.142857142857], [725.0, 6146.6], [724.0, 2677.0], [734.0, 369.0], [733.0, 264.0], [731.0, 1297.0], [730.0, 8093.0], [729.0, 996.5], [728.0, 7106.625], [719.0, 7760.0], [705.0, 875.0], [704.0, 2536.4285714285716], [707.0, 5139.5], [706.0, 4640.0], [709.0, 1252.0], [708.0, 4723.666666666667], [711.0, 7466.6], [710.0, 6732.5], [718.0, 6120.0], [717.0, 105.0], [716.0, 6146.8], [715.0, 8349.333333333334], [714.0, 4751.0], [713.0, 9383.5], [712.0, 6793.8], [727.0, 7802.8], [726.0, 942.0], [764.0, 9193.5], [767.0, 8479.75], [753.0, 4132.5], [752.0, 6470.0], [755.0, 2442.0], [754.0, 4783.666666666667], [757.0, 8563.733333333335], [756.0, 4299.0], [766.0, 1014.0], [765.0, 4606.333333333333], [763.0, 1230.0], [762.0, 1119.0], [761.0, 6437.5], [760.0, 8206.733333333335], [751.0, 5302.0], [737.0, 469.0], [736.0, 112.0], [739.0, 366.0], [738.0, 5747.333333333333], [741.0, 162.0], [740.0, 6057.5], [743.0, 202.0], [742.0, 7767.666666666666], [750.0, 1057.0], [749.0, 2508.75], [748.0, 4993.0], [747.0, 5935.666666666667], [746.0, 113.0], [745.0, 4039.333333333333], [744.0, 6442.6], [759.0, 8559.125], [758.0, 113.0], [796.0, 151.0], [799.0, 5660.0], [785.0, 6213.5], [784.0, 8150.333333333334], [787.0, 6373.25], [786.0, 8253.0], [789.0, 6070.0], [788.0, 217.0], [798.0, 382.5], [797.0, 5613.5], [795.0, 150.0], [794.0, 4184.0], [793.0, 5753.1], [792.0, 9585.5], [783.0, 920.3333333333334], [769.0, 104.0], [768.0, 127.0], [771.0, 5705.5], [770.0, 108.0], [773.0, 6053.0], [772.0, 1025.0], [775.0, 2117.666666666667], [774.0, 1247.0], [782.0, 8869.5], [781.0, 8166.5], [780.0, 7240.2], [779.0, 972.0], [778.0, 5040.333333333333], [777.0, 1378.0], [776.0, 4595.2], [791.0, 5661.5], [790.0, 5673.5], [828.0, 1045.0], [831.0, 9836.363636363636], [817.0, 9120.666666666666], [816.0, 3745.666666666667], [819.0, 7474.0], [818.0, 5565.5], [821.0, 6159.5], [820.0, 4642.0], [830.0, 4437.5], [829.0, 3171.1666666666665], [827.0, 5067.833333333333], [826.0, 1310.3333333333333], [825.0, 84.0], [824.0, 5473.0], [815.0, 10087.333333333332], [801.0, 1225.0], [800.0, 841.5], [803.0, 9195.4], [802.0, 751.0], [805.0, 4752.0], [804.0, 985.0], [807.0, 911.0], [806.0, 1296.0], [814.0, 6738.428571428572], [813.0, 5587.666666666667], [812.0, 1347.5], [811.0, 5129.0], [810.0, 4568.0], [809.0, 5899.75], [808.0, 5559.5], [823.0, 5453.0], [822.0, 6841.2], [860.0, 3062.4285714285716], [863.0, 6254.000000000001], [849.0, 5947.5], [848.0, 1084.0], [851.0, 274.0], [850.0, 6990.25], [853.0, 7093.0], [852.0, 121.0], [862.0, 5406.5], [861.0, 4556.4], [859.0, 2898.5], [858.0, 8752.5], [857.0, 5412.0], [856.0, 501.0], [847.0, 7185.499999999999], [833.0, 8469.166666666666], [832.0, 1419.0], [835.0, 137.0], [834.0, 7131.333333333334], [837.0, 5379.0], [836.0, 91.0], [839.0, 5448.5], [838.0, 5496.25], [846.0, 181.0], [845.0, 8418.384615384615], [844.0, 5378.0], [843.0, 4223.125], [842.0, 4869.571428571429], [841.0, 5993.111111111113], [840.0, 5393.5], [855.0, 5322.0], [854.0, 7019.0], [892.0, 127.33333333333334], [895.0, 325.0], [881.0, 1210.0], [880.0, 6959.0], [883.0, 4108.0], [882.0, 5320.0], [885.0, 454.0], [884.0, 7054.166666666666], [894.0, 278.0], [893.0, 83.0], [891.0, 7417.5], [890.0, 255.0], [889.0, 3434.0], [888.0, 94.0], [879.0, 5696.454545454545], [864.0, 6605.0], [866.0, 7656.333333333334], [865.0, 918.0], [869.0, 390.0], [868.0, 3533.0], [871.0, 5742.25], [870.0, 5632.75], [878.0, 4335.333333333333], [877.0, 6758.5], [876.0, 1326.0], [875.0, 4065.0], [874.0, 1379.0], [873.0, 3312.0], [872.0, 2371.2], [887.0, 6909.666666666666], [886.0, 8179.0], [924.0, 6408.099999999999], [927.0, 4802.5], [913.0, 5088.0], [912.0, 343.5], [915.0, 2253.6], [914.0, 6552.0], [917.0, 3033.0], [916.0, 197.5], [926.0, 4583.666666666667], [925.0, 4784.5], [923.0, 4814.5], [922.0, 5718.285714285715], [921.0, 63.0], [920.0, 4403.0], [911.0, 254.0], [897.0, 7419.0], [896.0, 3711.0], [899.0, 2539.0], [898.0, 8190.0], [901.0, 4595.333333333333], [900.0, 4275.333333333333], [903.0, 5825.5], [902.0, 4063.0], [910.0, 584.6666666666666], [909.0, 2716.0], [908.0, 5056.5], [907.0, 1690.0], [906.0, 6684.4], [905.0, 7016.5], [904.0, 6125.5], [919.0, 5912.090909090908], [918.0, 4495.142857142857], [956.0, 561.0], [959.0, 2619.0], [945.0, 5622.0], [944.0, 7931.1111111111095], [947.0, 2729.0], [946.0, 5455.75], [949.0, 3044.333333333333], [948.0, 5245.5], [958.0, 530.0], [957.0, 3224.0], [955.0, 7196.833333333333], [954.0, 7058.0], [953.0, 4753.5], [952.0, 3547.0], [943.0, 6146.0], [929.0, 6776.333333333334], [928.0, 751.0], [931.0, 78.0], [930.0, 54.0], [933.0, 5873.2], [932.0, 3642.666666666667], [935.0, 4079.4], [934.0, 5303.1], [942.0, 1036.25], [941.0, 153.6], [940.0, 4012.2], [939.0, 74.0], [938.0, 4080.4], [937.0, 93.0], [936.0, 60.0], [951.0, 2938.25], [950.0, 326.0], [988.0, 179.0], [991.0, 4557.5], [977.0, 4261.8], [976.0, 723.0], [979.0, 3229.5], [978.0, 3341.666666666667], [981.0, 5102.5], [980.0, 3595.285714285714], [990.0, 6009.0], [989.0, 3471.0], [987.0, 2989.333333333333], [986.0, 2156.0], [985.0, 4454.5], [984.0, 1170.0], [975.0, 4146.333333333333], [961.0, 2924.0], [960.0, 5509.5], [963.0, 6239.25], [962.0, 6944.75], [965.0, 3058.0], [964.0, 463.0], [967.0, 5516.0], [966.0, 43.0], [974.0, 5902.0], [973.0, 3943.0], [972.0, 2301.0], [971.0, 3566.2], [970.0, 2993.0], [969.0, 4572.5], [968.0, 3391.5], [983.0, 3952.6], [982.0, 74.5], [1000.0, 5674.340880147141], [999.0, 147.5], [998.0, 5857.8], [997.0, 4174.6], [996.0, 3321.666666666667], [995.0, 2310.0], [994.0, 2462.0], [993.0, 1911.0], [992.0, 1973.0], [1.0, 25.0]], "isOverall": false, "label": "Request", "isController": false}, {"data": [[865.2445999999961, 5325.393399999999]], "isOverall": false, "label": "Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3432.0, "minX": 1.629245068E12, "maxY": 84960.0, "series": [{"data": [[1.629245121E12, 52019.0], [1.629245078E12, 20724.0], [1.62924508E12, 31284.0], [1.629245123E12, 50087.0], [1.629245082E12, 9636.0], [1.629245084E12, 29832.0], [1.629245086E12, 27588.0], [1.629245088E12, 11616.0], [1.62924509E12, 35508.0], [1.629245092E12, 13992.0], [1.629245094E12, 23364.0], [1.629245096E12, 31944.0], [1.629245098E12, 12936.0], [1.629245099E12, 22440.0], [1.629245101E12, 36828.0], [1.629245103E12, 8712.0], [1.629245105E12, 32208.0], [1.629245107E12, 26400.0], [1.629245109E12, 10996.0], [1.629245068E12, 3432.0], [1.629245111E12, 11067.0], [1.629245113E12, 15401.0], [1.62924507E12, 20328.0], [1.629245072E12, 29040.0], [1.629245115E12, 26436.0], [1.629245117E12, 34608.0], [1.629245074E12, 9108.0], [1.629245076E12, 9240.0], [1.629245119E12, 49855.0], [1.629245079E12, 24288.0], [1.629245122E12, 49765.0], [1.629245081E12, 14124.0], [1.629245124E12, 48110.0], [1.629245083E12, 22836.0], [1.629245085E12, 33660.0], [1.629245087E12, 10164.0], [1.629245089E12, 27192.0], [1.629245091E12, 38016.0], [1.629245093E12, 20196.0], [1.629245095E12, 28248.0], [1.629245097E12, 18612.0], [1.6292451E12, 31680.0], [1.629245102E12, 23232.0], [1.629245104E12, 23628.0], [1.629245106E12, 37620.0], [1.629245108E12, 12901.0], [1.62924511E12, 6762.0], [1.629245069E12, 14784.0], [1.629245112E12, 8343.0], [1.629245071E12, 25608.0], [1.629245114E12, 17800.0], [1.629245073E12, 24948.0], [1.629245116E12, 32811.0], [1.629245075E12, 8052.0], [1.629245118E12, 41792.0], [1.629245077E12, 17820.0], [1.62924512E12, 47379.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.629245121E12, 78992.0], [1.629245078E12, 46315.0], [1.62924508E12, 69915.0], [1.629245123E12, 76076.0], [1.629245082E12, 21535.0], [1.629245084E12, 66670.0], [1.629245086E12, 61655.0], [1.629245088E12, 25960.0], [1.62924509E12, 79355.0], [1.629245092E12, 31270.0], [1.629245094E12, 52215.0], [1.629245096E12, 71390.0], [1.629245098E12, 28910.0], [1.629245099E12, 50150.0], [1.629245101E12, 82305.0], [1.629245103E12, 19470.0], [1.629245105E12, 71980.0], [1.629245107E12, 59000.0], [1.629245109E12, 18033.0], [1.629245068E12, 7670.0], [1.629245111E12, 17374.0], [1.629245113E12, 24490.0], [1.62924507E12, 45430.0], [1.629245072E12, 64900.0], [1.629245115E12, 40858.0], [1.629245117E12, 54916.0], [1.629245074E12, 20355.0], [1.629245076E12, 20650.0], [1.629245119E12, 76492.0], [1.629245079E12, 54280.0], [1.629245122E12, 75590.0], [1.629245081E12, 31565.0], [1.629245124E12, 72709.0], [1.629245083E12, 51035.0], [1.629245085E12, 75225.0], [1.629245087E12, 22715.0], [1.629245089E12, 60770.0], [1.629245091E12, 84960.0], [1.629245093E12, 45135.0], [1.629245095E12, 63130.0], [1.629245097E12, 41595.0], [1.6292451E12, 70800.0], [1.629245102E12, 51920.0], [1.629245104E12, 52805.0], [1.629245106E12, 84075.0], [1.629245108E12, 26846.0], [1.62924511E12, 10206.0], [1.629245069E12, 33040.0], [1.629245112E12, 12688.0], [1.629245071E12, 57230.0], [1.629245114E12, 27632.0], [1.629245073E12, 55755.0], [1.629245116E12, 53353.0], [1.629245075E12, 17995.0], [1.629245118E12, 64897.0], [1.629245077E12, 39825.0], [1.62924512E12, 71893.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.629245124E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1124.2374581939791, "minX": 1.629245068E12, "maxY": 8251.570093457945, "series": [{"data": [[1.629245121E12, 5793.521604938272], [1.629245078E12, 7241.878980891719], [1.62924508E12, 7506.417721518992], [1.629245123E12, 2482.951923076924], [1.629245082E12, 8172.5068493150675], [1.629245084E12, 6147.7522123893805], [1.629245086E12, 5802.588516746411], [1.629245088E12, 5017.772727272727], [1.62924509E12, 5490.840148698882], [1.629245092E12, 6309.226415094341], [1.629245094E12, 4569.338983050842], [1.629245096E12, 5394.202479338846], [1.629245098E12, 6175.877551020409], [1.629245099E12, 5213.588235294119], [1.629245101E12, 6098.985663082434], [1.629245103E12, 5537.348484848484], [1.629245105E12, 5554.618852459013], [1.629245107E12, 5476.675000000001], [1.629245109E12, 5369.70422535211], [1.629245068E12, 1674.923076923077], [1.629245111E12, 3680.7], [1.629245113E12, 3821.3673469387772], [1.62924507E12, 3409.844155844157], [1.629245072E12, 5321.263636363635], [1.629245115E12, 5039.602409638556], [1.629245117E12, 5748.836363636366], [1.629245074E12, 7264.898550724637], [1.629245076E12, 6584.842857142858], [1.629245119E12, 5363.22756410256], [1.629245079E12, 7395.809782608696], [1.629245122E12, 4525.119354838713], [1.629245081E12, 8251.570093457945], [1.629245124E12, 1124.2374581939791], [1.629245083E12, 6290.445086705201], [1.629245085E12, 6021.635294117647], [1.629245087E12, 6847.662337662338], [1.629245089E12, 5473.5485436893205], [1.629245091E12, 5889.8055555555575], [1.629245093E12, 5129.607843137255], [1.629245095E12, 4885.630841121493], [1.629245097E12, 5459.297872340426], [1.6292451E12, 5385.041666666669], [1.629245102E12, 5238.761363636363], [1.629245104E12, 4943.469273743015], [1.629245106E12, 5059.8315789473645], [1.629245108E12, 5902.478723404256], [1.62924511E12, 4643.214285714285], [1.629245069E12, 2584.812499999998], [1.629245112E12, 3656.0769230769233], [1.629245071E12, 4437.226804123713], [1.629245114E12, 4607.419642857143], [1.629245073E12, 6224.201058201058], [1.629245116E12, 5526.914691943129], [1.629245075E12, 7169.6065573770475], [1.629245118E12, 5419.790874524712], [1.629245077E12, 6807.933333333335], [1.62924512E12, 4939.979661016951]], "isOverall": false, "label": "Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.629245124E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1124.2374581939791, "minX": 1.629245068E12, "maxY": 8251.570093457945, "series": [{"data": [[1.629245121E12, 5793.521604938272], [1.629245078E12, 7241.878980891719], [1.62924508E12, 7506.417721518992], [1.629245123E12, 2482.951923076924], [1.629245082E12, 8172.5068493150675], [1.629245084E12, 6147.7522123893805], [1.629245086E12, 5802.588516746411], [1.629245088E12, 5017.772727272727], [1.62924509E12, 5490.840148698882], [1.629245092E12, 6309.226415094341], [1.629245094E12, 4569.338983050842], [1.629245096E12, 5394.202479338846], [1.629245098E12, 6175.877551020409], [1.629245099E12, 5213.588235294119], [1.629245101E12, 6098.985663082434], [1.629245103E12, 5537.348484848484], [1.629245105E12, 5554.618852459013], [1.629245107E12, 5476.675000000001], [1.629245109E12, 5369.70422535211], [1.629245068E12, 1674.923076923077], [1.629245111E12, 3680.7], [1.629245113E12, 3821.3673469387772], [1.62924507E12, 3409.844155844157], [1.629245072E12, 5321.263636363635], [1.629245115E12, 5039.602409638556], [1.629245117E12, 5748.836363636366], [1.629245074E12, 7264.898550724637], [1.629245076E12, 6584.842857142858], [1.629245119E12, 5363.22756410256], [1.629245079E12, 7395.809782608696], [1.629245122E12, 4525.119354838713], [1.629245081E12, 8251.570093457945], [1.629245124E12, 1124.2374581939791], [1.629245083E12, 6290.445086705201], [1.629245085E12, 6021.635294117647], [1.629245087E12, 6847.662337662338], [1.629245089E12, 5473.5485436893205], [1.629245091E12, 5889.8055555555575], [1.629245093E12, 5129.607843137255], [1.629245095E12, 4885.630841121493], [1.629245097E12, 5459.297872340426], [1.6292451E12, 5385.041666666669], [1.629245102E12, 5238.761363636363], [1.629245104E12, 4943.469273743015], [1.629245106E12, 5059.8315789473645], [1.629245108E12, 5902.478723404256], [1.62924511E12, 4643.214285714285], [1.629245069E12, 2584.812499999998], [1.629245112E12, 3656.0769230769233], [1.629245071E12, 4437.226804123713], [1.629245114E12, 4607.419642857143], [1.629245073E12, 6224.201058201058], [1.629245116E12, 5526.914691943129], [1.629245075E12, 7169.6065573770475], [1.629245118E12, 5419.790874524712], [1.629245077E12, 6807.933333333335], [1.62924512E12, 4939.979661016951]], "isOverall": false, "label": "Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.629245124E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.04682274247491644, "minX": 1.629245068E12, "maxY": 0.7410714285714287, "series": [{"data": [[1.629245121E12, 0.14506172839506176], [1.629245078E12, 0.39490445859872614], [1.62924508E12, 0.43881856540084385], [1.629245123E12, 0.18589743589743593], [1.629245082E12, 0.34246575342465757], [1.629245084E12, 0.3628318584070798], [1.629245086E12, 0.382775119617225], [1.629245088E12, 0.465909090909091], [1.62924509E12, 0.40148698884758366], [1.629245092E12, 0.4056603773584904], [1.629245094E12, 0.3502824858757064], [1.629245096E12, 0.3884297520661159], [1.629245098E12, 0.3469387755102042], [1.629245099E12, 0.3529411764705883], [1.629245101E12, 0.43727598566308257], [1.629245103E12, 0.3484848484848486], [1.629245105E12, 0.34426229508196715], [1.629245107E12, 0.38], [1.629245109E12, 0.3802816901408451], [1.629245068E12, 0.38461538461538464], [1.629245111E12, 0.18571428571428578], [1.629245113E12, 0.11224489795918369], [1.62924507E12, 0.42207792207792194], [1.629245072E12, 0.5409090909090908], [1.629245115E12, 0.16867469879518066], [1.629245117E12, 0.18181818181818168], [1.629245074E12, 0.6376811594202902], [1.629245076E12, 0.3714285714285715], [1.629245119E12, 0.14423076923076916], [1.629245079E12, 0.41847826086956513], [1.629245122E12, 0.1516129032258064], [1.629245081E12, 0.36448598130841126], [1.629245124E12, 0.04682274247491644], [1.629245083E12, 0.3815028901734105], [1.629245085E12, 0.36862745098039224], [1.629245087E12, 0.32467532467532484], [1.629245089E12, 0.4514563106796115], [1.629245091E12, 0.4340277777777778], [1.629245093E12, 0.457516339869281], [1.629245095E12, 0.4299065420560749], [1.629245097E12, 0.38297872340425554], [1.6292451E12, 0.4041666666666667], [1.629245102E12, 0.3181818181818182], [1.629245104E12, 0.40782122905027923], [1.629245106E12, 0.3929824561403509], [1.629245108E12, 0.47872340425531923], [1.62924511E12, 0.19047619047619052], [1.629245069E12, 0.7410714285714287], [1.629245112E12, 0.09615384615384617], [1.629245071E12, 0.5000000000000002], [1.629245114E12, 0.14285714285714293], [1.629245073E12, 0.4814814814814816], [1.629245116E12, 0.1184834123222749], [1.629245075E12, 0.4918032786885245], [1.629245118E12, 0.12547528517110268], [1.629245077E12, 0.4222222222222224], [1.62924512E12, 0.1254237288135593]], "isOverall": false, "label": "Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.629245124E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.629245108E12, "maxY": 17418.0, "series": [{"data": [[1.629245121E12, 17331.0], [1.629245122E12, 15101.0], [1.629245124E12, 15698.0], [1.629245123E12, 14947.0], [1.629245108E12, 5285.0], [1.629245109E12, 6309.0], [1.62924511E12, 7426.0], [1.629245112E12, 9473.0], [1.629245111E12, 8237.0], [1.629245113E12, 10051.0], [1.629245114E12, 10746.0], [1.629245116E12, 13079.0], [1.629245115E12, 11868.0], [1.629245117E12, 13401.0], [1.629245118E12, 14933.0], [1.62924512E12, 17418.0], [1.629245119E12, 14608.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.629245121E12, 13969.0], [1.629245122E12, 13815.2], [1.629245124E12, 3016.0000000000236], [1.629245123E12, 6892.0], [1.629245108E12, 4991.4], [1.629245109E12, 5612.3], [1.62924511E12, 7000.6], [1.629245112E12, 8016.2], [1.629245111E12, 6920.4], [1.629245113E12, 8653.2], [1.629245114E12, 9910.5], [1.629245116E12, 11119.2], [1.629245115E12, 10487.2], [1.629245117E12, 11513.7], [1.629245118E12, 12237.0], [1.62924512E12, 13399.8], [1.629245119E12, 12866.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.629245121E12, 14362.400000000001], [1.629245122E12, 14630.74], [1.629245124E12, 7479.399999999996], [1.629245123E12, 14392.880000000008], [1.629245108E12, 5285.0], [1.629245109E12, 6309.0], [1.62924511E12, 7426.0], [1.629245112E12, 9473.0], [1.629245111E12, 8237.0], [1.629245113E12, 10051.0], [1.629245114E12, 10735.550000000001], [1.629245116E12, 12824.12], [1.629245115E12, 11738.04], [1.629245117E12, 13064.339999999998], [1.629245118E12, 14616.550000000001], [1.62924512E12, 14018.479999999958], [1.629245119E12, 13050.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.629245121E12, 14062.0], [1.629245122E12, 14113.5], [1.629245124E12, 5616.35], [1.629245123E12, 7835.799999999996], [1.629245108E12, 5285.0], [1.629245109E12, 5769.349999999999], [1.62924511E12, 7306.1], [1.629245112E12, 8731.8], [1.629245111E12, 7138.799999999999], [1.629245113E12, 9380.500000000002], [1.629245114E12, 10328.75], [1.629245116E12, 11541.800000000001], [1.629245115E12, 10903.9], [1.629245117E12, 11722.35], [1.629245118E12, 12388.75], [1.62924512E12, 13572.6], [1.629245119E12, 12915.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.629245121E12, 153.0], [1.629245122E12, 161.0], [1.629245124E12, 25.0], [1.629245123E12, 148.0], [1.629245108E12, 3899.0], [1.629245109E12, 4046.0], [1.62924511E12, 43.0], [1.629245112E12, 49.0], [1.629245111E12, 61.0], [1.629245113E12, 39.0], [1.629245114E12, 32.0], [1.629245116E12, 60.0], [1.629245115E12, 39.0], [1.629245117E12, 80.0], [1.629245118E12, 70.0], [1.62924512E12, 140.0], [1.629245119E12, 114.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.629245121E12, 695.0], [1.629245122E12, 715.0], [1.629245124E12, 433.0], [1.629245123E12, 720.0], [1.629245108E12, 4038.0], [1.629245109E12, 4806.0], [1.62924511E12, 5664.0], [1.629245112E12, 2969.0], [1.629245111E12, 2404.0], [1.629245113E12, 1980.0], [1.629245114E12, 2472.5], [1.629245116E12, 1221.0], [1.629245115E12, 2874.5], [1.629245117E12, 1292.5], [1.629245118E12, 1046.0], [1.62924512E12, 709.0], [1.629245119E12, 741.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.629245124E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 433.0, "minX": 26.0, "maxY": 14008.0, "series": [{"data": [[166.0, 2874.5], [42.0, 5664.0], [52.0, 2969.0], [211.0, 1221.0], [220.0, 1292.5], [263.0, 1046.0], [71.0, 4806.0], [70.0, 2404.0], [295.0, 709.0], [299.0, 433.0], [312.0, 727.0], [310.0, 715.0], [324.0, 695.0], [94.0, 4038.0], [98.0, 1980.0], [112.0, 2472.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[26.0, 1694.5], [52.0, 7870.0], [61.0, 7934.0], [66.0, 4781.5], [69.0, 7230.0], [70.0, 6252.0], [71.0, 7706.0], [73.0, 6657.0], [77.0, 5987.0], [88.0, 4928.0], [94.0, 6444.0], [98.0, 5582.0], [107.0, 7952.0], [106.0, 5646.5], [112.0, 2603.0], [135.0, 6568.0], [141.0, 4827.0], [154.0, 3417.5], [157.0, 6928.0], [153.0, 4494.0], [166.0, 10191.5], [173.0, 5661.0], [170.0, 4880.0], [177.0, 4359.0], [176.0, 5164.5], [179.0, 4582.0], [189.0, 6173.0], [184.0, 6896.0], [194.0, 4458.5], [206.0, 5145.0], [200.0, 5008.0], [209.0, 5179.0], [214.0, 4575.0], [211.0, 10569.5], [220.0, 5371.5], [226.0, 5365.5], [237.0, 7031.0], [242.0, 4969.0], [240.0, 4983.0], [244.0, 4822.0], [255.0, 5126.0], [269.0, 5132.0], [263.0, 12237.0], [279.0, 5128.0], [285.0, 4830.0], [288.0, 5190.5], [295.0, 13296.0], [299.0, 5345.0], [312.0, 12413.5], [310.0, 14008.0], [324.0, 13825.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 324.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 433.0, "minX": 26.0, "maxY": 14008.0, "series": [{"data": [[166.0, 2874.5], [42.0, 5664.0], [52.0, 2969.0], [211.0, 1221.0], [220.0, 1292.5], [263.0, 1046.0], [71.0, 4806.0], [70.0, 2404.0], [295.0, 709.0], [299.0, 433.0], [312.0, 727.0], [310.0, 715.0], [324.0, 695.0], [94.0, 4038.0], [98.0, 1980.0], [112.0, 2472.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[26.0, 1694.5], [52.0, 7870.0], [61.0, 7934.0], [66.0, 4781.5], [69.0, 7230.0], [70.0, 6252.0], [71.0, 7706.0], [73.0, 6657.0], [77.0, 5987.0], [88.0, 4928.0], [94.0, 6444.0], [98.0, 5582.0], [107.0, 7952.0], [106.0, 5646.5], [112.0, 2603.0], [135.0, 6568.0], [141.0, 4827.0], [154.0, 3417.5], [157.0, 6928.0], [153.0, 4494.0], [166.0, 10191.5], [173.0, 5661.0], [170.0, 4880.0], [177.0, 4359.0], [176.0, 5164.5], [179.0, 4582.0], [189.0, 6173.0], [184.0, 6896.0], [194.0, 4458.5], [206.0, 5145.0], [200.0, 5008.0], [209.0, 5179.0], [214.0, 4575.0], [211.0, 10569.5], [220.0, 5371.5], [226.0, 5365.5], [237.0, 7031.0], [242.0, 4969.0], [240.0, 4983.0], [244.0, 4822.0], [255.0, 5126.0], [269.0, 5132.0], [263.0, 12237.0], [279.0, 5128.0], [285.0, 4830.0], [288.0, 5190.5], [295.0, 13296.0], [299.0, 5345.0], [312.0, 12413.5], [310.0, 14008.0], [324.0, 13825.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 324.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.629245066E12, "maxY": 816.0, "series": [{"data": [[1.629245121E12, 211.0], [1.629245078E12, 157.0], [1.62924508E12, 237.0], [1.629245123E12, 202.0], [1.629245082E12, 73.0], [1.629245084E12, 225.0], [1.629245086E12, 209.0], [1.629245088E12, 88.0], [1.62924509E12, 269.0], [1.629245092E12, 106.0], [1.629245094E12, 177.0], [1.629245096E12, 241.0], [1.629245098E12, 98.0], [1.629245099E12, 170.0], [1.629245101E12, 278.0], [1.629245103E12, 66.0], [1.629245105E12, 244.0], [1.629245107E12, 201.0], [1.629245109E12, 71.0], [1.629245066E12, 184.0], [1.629245068E12, 26.0], [1.629245111E12, 70.0], [1.629245113E12, 61.0], [1.62924507E12, 154.0], [1.629245072E12, 220.0], [1.629245115E12, 117.0], [1.629245117E12, 149.0], [1.629245074E12, 69.0], [1.629245076E12, 70.0], [1.629245119E12, 209.0], [1.629245079E12, 184.0], [1.629245122E12, 218.0], [1.629245081E12, 107.0], [1.629245124E12, 132.0], [1.629245083E12, 173.0], [1.629245085E12, 256.0], [1.629245087E12, 77.0], [1.629245089E12, 206.0], [1.629245091E12, 288.0], [1.629245093E12, 153.0], [1.629245095E12, 215.0], [1.629245097E12, 141.0], [1.6292451E12, 240.0], [1.629245102E12, 177.0], [1.629245104E12, 179.0], [1.629245106E12, 285.0], [1.629245108E12, 93.0], [1.629245067E12, 816.0], [1.62924511E12, 42.0], [1.629245069E12, 112.0], [1.629245112E12, 49.0], [1.629245071E12, 194.0], [1.629245114E12, 78.0], [1.629245073E12, 189.0], [1.629245116E12, 156.0], [1.629245075E12, 61.0], [1.629245118E12, 187.0], [1.629245077E12, 135.0], [1.62924512E12, 205.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.629245124E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.629245068E12, "maxY": 319.0, "series": [{"data": [[1.629245121E12, 319.0], [1.629245122E12, 305.0], [1.629245124E12, 298.0], [1.629245123E12, 307.0], [1.629245108E12, 17.0], [1.629245109E12, 56.0], [1.62924511E12, 42.0], [1.629245112E12, 51.0], [1.629245111E12, 63.0], [1.629245113E12, 85.0], [1.629245114E12, 104.0], [1.629245116E12, 171.0], [1.629245115E12, 156.0], [1.629245117E12, 192.0], [1.629245118E12, 244.0], [1.62924512E12, 291.0], [1.629245119E12, 299.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.629245121E12, 5.0], [1.629245078E12, 157.0], [1.62924508E12, 237.0], [1.629245123E12, 5.0], [1.629245082E12, 73.0], [1.629245084E12, 226.0], [1.629245086E12, 209.0], [1.629245088E12, 88.0], [1.62924509E12, 269.0], [1.629245092E12, 106.0], [1.629245094E12, 177.0], [1.629245096E12, 242.0], [1.629245098E12, 98.0], [1.629245099E12, 170.0], [1.629245101E12, 279.0], [1.629245103E12, 66.0], [1.629245105E12, 244.0], [1.629245107E12, 200.0], [1.629245109E12, 15.0], [1.629245068E12, 26.0], [1.629245111E12, 7.0], [1.629245113E12, 13.0], [1.62924507E12, 154.0], [1.629245072E12, 220.0], [1.629245115E12, 10.0], [1.629245117E12, 28.0], [1.629245074E12, 69.0], [1.629245076E12, 70.0], [1.629245119E12, 13.0], [1.629245079E12, 184.0], [1.629245122E12, 5.0], [1.629245081E12, 107.0], [1.629245124E12, 1.0], [1.629245083E12, 173.0], [1.629245085E12, 255.0], [1.629245087E12, 77.0], [1.629245089E12, 206.0], [1.629245091E12, 288.0], [1.629245093E12, 153.0], [1.629245095E12, 214.0], [1.629245097E12, 141.0], [1.6292451E12, 240.0], [1.629245102E12, 176.0], [1.629245104E12, 179.0], [1.629245106E12, 285.0], [1.629245108E12, 77.0], [1.629245069E12, 112.0], [1.629245112E12, 1.0], [1.629245071E12, 194.0], [1.629245114E12, 8.0], [1.629245073E12, 189.0], [1.629245116E12, 40.0], [1.629245075E12, 61.0], [1.629245118E12, 19.0], [1.629245077E12, 135.0], [1.62924512E12, 4.0]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1.629245124E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.629245068E12, "maxY": 319.0, "series": [{"data": [[1.629245121E12, 5.0], [1.629245078E12, 157.0], [1.62924508E12, 237.0], [1.629245123E12, 5.0], [1.629245082E12, 73.0], [1.629245084E12, 226.0], [1.629245086E12, 209.0], [1.629245088E12, 88.0], [1.62924509E12, 269.0], [1.629245092E12, 106.0], [1.629245094E12, 177.0], [1.629245096E12, 242.0], [1.629245098E12, 98.0], [1.629245099E12, 170.0], [1.629245101E12, 279.0], [1.629245103E12, 66.0], [1.629245105E12, 244.0], [1.629245107E12, 200.0], [1.629245109E12, 15.0], [1.629245068E12, 26.0], [1.629245111E12, 7.0], [1.629245113E12, 13.0], [1.62924507E12, 154.0], [1.629245072E12, 220.0], [1.629245115E12, 10.0], [1.629245117E12, 28.0], [1.629245074E12, 69.0], [1.629245076E12, 70.0], [1.629245119E12, 13.0], [1.629245079E12, 184.0], [1.629245122E12, 5.0], [1.629245081E12, 107.0], [1.629245124E12, 1.0], [1.629245083E12, 173.0], [1.629245085E12, 255.0], [1.629245087E12, 77.0], [1.629245089E12, 206.0], [1.629245091E12, 288.0], [1.629245093E12, 153.0], [1.629245095E12, 214.0], [1.629245097E12, 141.0], [1.6292451E12, 240.0], [1.629245102E12, 176.0], [1.629245104E12, 179.0], [1.629245106E12, 285.0], [1.629245108E12, 77.0], [1.629245069E12, 112.0], [1.629245112E12, 1.0], [1.629245071E12, 194.0], [1.629245114E12, 8.0], [1.629245073E12, 189.0], [1.629245116E12, 40.0], [1.629245075E12, 61.0], [1.629245118E12, 19.0], [1.629245077E12, 135.0], [1.62924512E12, 4.0]], "isOverall": false, "label": "Request-failure", "isController": false}, {"data": [[1.629245121E12, 319.0], [1.629245122E12, 305.0], [1.629245124E12, 298.0], [1.629245123E12, 307.0], [1.629245108E12, 17.0], [1.629245109E12, 56.0], [1.62924511E12, 42.0], [1.629245112E12, 51.0], [1.629245111E12, 63.0], [1.629245113E12, 85.0], [1.629245114E12, 104.0], [1.629245116E12, 171.0], [1.629245115E12, 156.0], [1.629245117E12, 192.0], [1.629245118E12, 244.0], [1.62924512E12, 291.0], [1.629245119E12, 299.0]], "isOverall": false, "label": "Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.629245124E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.629245068E12, "maxY": 319.0, "series": [{"data": [[1.629245121E12, 319.0], [1.629245122E12, 305.0], [1.629245124E12, 298.0], [1.629245123E12, 307.0], [1.629245108E12, 17.0], [1.629245109E12, 56.0], [1.62924511E12, 42.0], [1.629245112E12, 51.0], [1.629245111E12, 63.0], [1.629245113E12, 85.0], [1.629245114E12, 104.0], [1.629245116E12, 171.0], [1.629245115E12, 156.0], [1.629245117E12, 192.0], [1.629245118E12, 244.0], [1.62924512E12, 291.0], [1.629245119E12, 299.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.629245121E12, 5.0], [1.629245078E12, 157.0], [1.62924508E12, 237.0], [1.629245123E12, 5.0], [1.629245082E12, 73.0], [1.629245084E12, 226.0], [1.629245086E12, 209.0], [1.629245088E12, 88.0], [1.62924509E12, 269.0], [1.629245092E12, 106.0], [1.629245094E12, 177.0], [1.629245096E12, 242.0], [1.629245098E12, 98.0], [1.629245099E12, 170.0], [1.629245101E12, 279.0], [1.629245103E12, 66.0], [1.629245105E12, 244.0], [1.629245107E12, 200.0], [1.629245109E12, 15.0], [1.629245068E12, 26.0], [1.629245111E12, 7.0], [1.629245113E12, 13.0], [1.62924507E12, 154.0], [1.629245072E12, 220.0], [1.629245115E12, 10.0], [1.629245117E12, 28.0], [1.629245074E12, 69.0], [1.629245076E12, 70.0], [1.629245119E12, 13.0], [1.629245079E12, 184.0], [1.629245122E12, 5.0], [1.629245081E12, 107.0], [1.629245124E12, 1.0], [1.629245083E12, 173.0], [1.629245085E12, 255.0], [1.629245087E12, 77.0], [1.629245089E12, 206.0], [1.629245091E12, 288.0], [1.629245093E12, 153.0], [1.629245095E12, 214.0], [1.629245097E12, 141.0], [1.6292451E12, 240.0], [1.629245102E12, 176.0], [1.629245104E12, 179.0], [1.629245106E12, 285.0], [1.629245108E12, 77.0], [1.629245069E12, 112.0], [1.629245112E12, 1.0], [1.629245071E12, 194.0], [1.629245114E12, 8.0], [1.629245073E12, 189.0], [1.629245116E12, 40.0], [1.629245075E12, 61.0], [1.629245118E12, 19.0], [1.629245077E12, 135.0], [1.62924512E12, 4.0]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1000, "maxX": 1.629245124E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

